generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String
  email            String
  emailVerified    Boolean   @default(false)
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  twoFactorEnabled Boolean   @default(false)
  Session          Session[]
  Account          Account[]
  Room             Room[]    @relation("RoomCreator")
  Invite           Invite[]
  Message          Message[]
  Reaction         Reaction[]
  Participant      Participant[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model Account {
  id           String    @id @default(cuid())
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Room {
  id             String        @id @default(cuid())
  title          String
  description    String?
  type           RoomType      @default(PRIVATE)
  startTime      DateTime
  endTime        DateTime
  maxParticipants Int?
  tag            String
  creatorId      String
  creator        User          @relation("RoomCreator", fields: [creatorId], references: [id])
  invites        Invite[]
  messages       Message[]
  reactions      Reaction[]
  participants   Participant[]
  joinCode       String?       @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("room")
}

enum RoomType {
  PRIVATE
  PUBLIC
}

model Invite {
  id        String   @id @default(cuid())
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId    String?  // Null if inviting by email
  user      User?    @relation(fields: [userId], references: [id])
  email     String?  // Null if inviting registered user
  createdAt DateTime @default(now())

  @@map("invite")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@map("message")
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@map("reaction")
}

model Participant {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  joinedAt  DateTime @default(now())
  leftAt    DateTime?

  @@map("participant")
}